package com.company.database;


import com.company.Login.User;
import com.company.classes.Worker;

import java.io.Serializable;
import java.sql.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.*;
import java.util.stream.Collectors;

import com.company.enums.Commands;
import com.company.enums.Position;
import com.company.exceptions.OperationCanceledException;
import com.company.exceptions.UnknownCommandException;

public class PostgresqlDatabase implements Serializable {

    public LinkedList<Worker> database;
    private Scanner terminal;
    private String scriptName;
    private int recursionCounter;
    private Connection c = null;
    private Statement stmt = null;
    private String sql;



    //check booleans
    private boolean isInitialized;

    private ZonedDateTime initializationTime;

    public PostgresqlDatabase(){}

    //public methods

    /**
     * Initializing database (like constructor), but without a file (if it's not given)
     */
    public void initialize(){
        //initializing variables
        this.database = new LinkedList<>();
        this.terminal = new Scanner(System.in);
        this.initializationTime = ZonedDateTime.now();
        this.recursionCounter = 0;
        this.scriptName = "";


        try {
            Class.forName("org.postgresql.Driver");
            c = DriverManager
                    .getConnection("jdbc:postgresql://localhost:5432/postgres",
                            "postgres", "12345678");
            System.out.println("Opened database successfully");

            stmt = c.createStatement();
            sql = new StringBuilder()
                    .append("CREATE TABLE DATABASE ")
                    .append("(ID long GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY     ,")
                    .append(" NAME           TEXT    NOT NULL, ")
                    .append(" SALARY            INT     NOT NULL, ")
                    .append("POSITION    TEXT,")
                    .append(" COORDINATES    TEXT,")
                    .append(" PERSON    TEXT,")
                    .append(" STARTDATE       TEXT   NOT NULL,")
                    .append(" ENDDATE       TEXT,")
                    .append(" LOGIN       TEXT     NOT NULL);")
                    .toString();
            stmt.executeUpdate(sql);
            //stmt.close();
            //c.close();
            System.out.println("I created db");
        } catch (ArrayIndexOutOfBoundsException | SQLException | ClassNotFoundException e) {
            System.err.println(e.getClass().getName()+": "+ e.getMessage() );
            System.out.println("Table already exists, all right");
        }
        System.out.println("Table created successfully");

        System.out.println("Server database has been initialized");
        System.out.println("------------------------------------");
        this.isInitialized = true;
    }

    public void setDatabase(LinkedList<Worker> database){
        //filtering null workers from the good ones
        try {
            ResultSet rs = stmt.executeQuery( "SELECT * FROM DATABASE;" );
            while ( rs.next() ) {
                int id = rs.getInt("id");
                String  name = rs.getString("name");
                int age  = rs.getInt("salary");
                String  address = rs.getString("coordinates");
                float salary = rs.getFloat("salary");
                System.out.println( "ID = " + id );
                System.out.println( "NAME = " + name );
                System.out.println( "AGE = " + age );
                System.out.println( "ADDRESS = " + address );
                System.out.println( "SALARY = " + salary );
                System.out.println();
            }
            rs.close();
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName()+": "+ e.getMessage() );
            System.exit(0);
        }
        this.database = (LinkedList<Worker>) Terminal.getInstance(
                database.stream()
                        .filter(worker -> !Objects.isNull(worker)).collect(Collectors.toList())
        );
        sortBySize();
    }

    /**
     * Returns index in database by id
     * @param id
     * @return
     */
    public int returnIndexById(long id){
        int index = -1;
        for (int i = 0; i < database.size(); i++) {
            if (database.get(i).getId() == id){
                index = i;
                break;
            }
        }
        return index;
    }

    public void sortBySize(){
        Collections.sort(this.database,new Comparator<Worker>() {
            @Override
            public int compare(Worker a, Worker b){
                return Double.compare(a.getSalary(), b.getSalary());
            }
        });
    }
}
